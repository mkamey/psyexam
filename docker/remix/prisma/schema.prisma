generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Patient {
  id         Int      @id @default(autoincrement())
  sex        Int
  birthdate  DateTime
  initial    String   @db.Char(8)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  stackedExams StackedExam[]
  results      Result[]

  @@map("patients")
}

model Exam {
  id        Int      @id @default(autoincrement())
  examname  String   @unique @db.VarChar(255)
  cutoff    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  stackedExams  StackedExam[]
  results       Result[]
  examSetItems  ExamSetItem[]

  @@map("exams")
}

model ExamSet {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  description String?       @db.VarChar(1000)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  examSetItems ExamSetItem[]

  @@map("exam_sets")
}

model ExamSetItem {
  id        Int      @id @default(autoincrement())
  examSet   ExamSet  @relation(fields: [examSetId], references: [id], onDelete: Cascade)
  examSetId Int      @map("exam_set_id")
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    Int      @map("exam_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@unique([examSetId, examId])
  @@map("exam_set_items")
}

model StackedExam {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int      @map("patient_id")
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    Int      @map("exam_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stacked_exams")
}

model Result {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int      @map("patient_id")
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    Int      @map("exam_id")
  item0     Int?
  item1     Int?
  item2     Int?
  item3     Int?
  item4     Int?
  item5     Int?
  item6     Int?
  item7     Int?
  item8     Int?
  item9     Int?
  free0     String?  @db.VarChar(2000)
  free1     String?  @db.VarChar(2000)
  free2     String?  @db.VarChar(2000)
  free3     String?  @db.VarChar(2000)
  free4     String?  @db.VarChar(2000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("results")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  fullName   String   @map("full_name") @db.VarChar(255)
  role       String   @default("doctor") @db.VarChar(50)
  isApproved Boolean  @default(false) @map("is_approved")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("users")
}
